- JSX란 무엇인가??
    => 

- props 사용법
  => 컴포넌트 선언시 자식객체로 넘겨주고 싶은 변수명에 넘기고 싶은 객체 선언
  변수명 = {전달을 원하는 객체명}
  단순히 변수,객체 뿐 아니라 함수도 상속이 가능함

- React.StrictMode 가 무엇인지
    왜 콘솔이 두번 찍히게 되는지??
    => 

- 리액트에서 버츄어돔이 바뀌게 되면 어느부분이 바뀌었는지 확인 후,
  바뀐요소들을 모두 바꾸어주게 됨 
  => 이럴떄 jsx키를 사용해서 어떻게 바뀌었는지와 고유하게 바뀐상태를 관리함**
  ** 인덱스는 키로 잡으면 안됨 (다 다른 값이라고 판단을 하게됨)
  -> 만약 리스트가 추가되거나 제거되면 다시 0부터 시작하는 경우가 생김

- React State 
  => 컴포넌트의 렌더링 결과물에 영향을 주는 데이터를 갖고 있는 객체
  state가 변경되면 컴포넌트는 리랜더링이 일어남
  컴포넌트 안에서 관리됨
  const [A,setA] = useState("");

- setState()를 사용해서 state를 업데이트 해줌**

- Constructor
  => 생성자를 사용하면 인스턴스화된 객체에서 다른 메서드를 호출하기 전에
  수행해야 하는 사용자 지정 초기화를 제공함

- super 클래스 **
  => 자식 클래스 내에서 부모 클래스의 생성자를 호출할떄 사용됨
  자식 클래스 내에서 부모 클래스의 메소드를 호출할때 사용됨

- React Hooks :: Vue Hook이랑 비슷한데 시점적으로 종류가 더 많은듯
  => 생명주기에 따른 시점으로 훅을 구분하는게 좋음
  원래는 생명주기를 함수형 컴포넌트로 사용을 못햐였기때문에 클래스형 컴포넌트로
  사용을 해왔다 .... ->  

- HOC(Higher Order Component)
  => 화면에서 재사용 가능한 로직만을 분리해서 comopnent로 만들고,
  재사용 불가능한 UI와 같은 다른 부분들은 parameter로 받아서 처리하는 방법

- 클래스형 컴포넌트는 함수형 컴포넌트에 비하여 바벨로 변환 과정이 너무 길고,
  간결하지 못하다.

- Destructuring 구조분해할당
  => 객체 나 배열의 속성을 분해해서 새롭게 담아내는 javascript 문법

- 리액트에서 불변성
  => 사전적으로는 값이나 상태를 변경할 수 없는 것을 의미
  자바스크립트에서 원본데이터를 변경하는 메소드 => splice,push***

- 전개연산자(...)
  => ECMAScript16(2015)에서 새롭게 추가됨
  특정 객체 또는 배열의 값을 다른 객체,배열로 복제하고나 옮길때 사용함
  ** 전개연산자 사용시, 원본 베열 유지됨

- for vs reduce 
  => array.reduce(reducer함수, initialValue)

- useEffect
  => 컴포넌트가 렌더링 될 때 특정 작업을 실행할 수 있도록 하는 HOOK
  
- fetch()
  => 원격 API에 요청을 보낼때 사용

- jsonplaceholder
  => api테스트 할때 무료로 테스트 가능한 무료 rest api
  
- React.memo()**
  => 리액트는 컴포넌트를 렌더링 한 후 , 이전에 렌더링된 결과와 비교해서 DOM업데이트를 결정해줌
  렌더링 결과가 이전과 다르면 리액트는 돔을 업데이트 해줌
  이 과정에서 React.memo()로 쌓여있다면 , 리액트는 컴포넌트를 렌더링하고 결과를 메모라이징해줌
  다음 렌더링이 일어날때 컴포넌트의 props가 같다면 리액트는 메모라이징된 내용을 재사용함

- Memoiztion
  => 비용이 많이 드는 함수 호출의 결과를 저장하고 동일한 입력이 다시 발생할 때 캐시된 결과를 반환해서
     프로그램 속도를 높여주는 최적화 기술

  ** 리액트 렌더링 성능 최적화를 위햐서는 컴포넌트 분리 작업과 React.memo를 사용해주면 됨 **

- React.useCallback()**
  => 메모제이션된 함수를 반환 해주는 함수 :: 렌더링 되어지는 컴포넌트 안의 함수를 다시 렌더링 하지 않게 할때 사용
  ex) const testFunction() = useCallback(() => {}, []);

- shallow compare (얕은 비교)
  => 숫자, 문자열 등 원시 자료형은 값을 비교함
  배열,객체 등 참조 자료형은 값 혹은 속성을 비교하지 않고, 참조되는 위치를 비교함
  언제사용 -> React.memo()에서 props를 비교할때
	    리액트 컴포넌트가 렌더링을 하기 전 (state 변경이 있을때 / 부모 컴포넌트가 렌더링 될 때)

- 리액트가 리렌더링 되는 경우 ****
  => 1. state 변경이 있을 때  
     2. 부모 컴포넌트가 렌더링 될 때
     3. 새로운 props가 들어올 때(props값이 바뀔때??를 말하는건지..?)
     4. shouldComponentUpdate에서 true가 반환될 때
     5. forceUpdate가 실행될 때

- 깊은 비교
  => 얕은 비교와 달리 깊은 비교는 객체의 경우에도 값으로 비교함
  1. Object depth가 깊지 않은 경우 :: JSON.stringfy()사용
  2. Object depth가 깊은 경우 :: loads 라이브러리의 isEqual()사용






